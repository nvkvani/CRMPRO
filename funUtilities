package com.qa.crm.utils;

import java.io.File;
import java.io.FileInputStream;

import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

import org.apache.commons.io.FileUtils;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.openqa.selenium.By;
import org.openqa.selenium.JavascriptExecutor;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.Select;

import com.qa.crm.base.TestBase;

public class FunUtilities extends TestBase{
	
	public static String FILE_PATH="/Users/coreytheiss/Vani-WorkSpeace/PRACTICE/src/test/java/resources/";
	
	
	FunUtilities(){
		super();
	}
	
	public static String getTitle(){
		return driver.getTitle();
		
	}
	
	public static List<String> getLink(List<WebElement> obtainedList){
		List<String> links = new ArrayList<String>();
		
		for(WebElement link : obtainedList) {
			links.add(link.getText());
		}
		
		
		return links;
		
	}
	
	public static void takescreenshot(WebElement el) {
		
	
		
		JavascriptExecutor JS = (JavascriptExecutor)driver;
		JS.executeScript("arguments[0].scrollIntoView", el);
		TakesScreenshot TS = (TakesScreenshot)driver;
		File srcFile = TS.getScreenshotAs(OutputType.FILE);
		
	
		File destFile = new File(System.getProperty("USER_DIR")+"//"+"src//test//java//resources//screenshots"+"123.jpg");
		try {
			FileUtils.copyFile(srcFile, destFile);
		} catch (IOException e) {
	
			e.printStackTrace();
		}
	}
	
public static void takescreenshot() {

		TakesScreenshot TS = (TakesScreenshot)driver;
		File srcFile = TS.getScreenshotAs(OutputType.FILE);
		
	
		File destFile = new File(System.getProperty("USER_DIR")+"//"+"src//test//java//resources//screenshots"+"testFailed.jpg");
		try {
			FileUtils.copyFile(srcFile, destFile);
		} catch (IOException e) {
	
			e.printStackTrace();
		}
	}
	
	
	public static List<HashMap<String,String>> ReadDataFromExcel(String FileName, String SheetName ) {
		FileInputStream fis;
		
		List<HashMap<String, String>> myData = new ArrayList<HashMap<String, String>>();
		try {
			fis = new FileInputStream(System.getProperty("user.dir")+"//"+"src//test//java//resources//"+FileName);
			
			XSSFWorkbook workbook = new XSSFWorkbook(fis);
			XSSFSheet sheet = workbook.getSheet(SheetName);
			Row HeaderRow = sheet.getRow(0);
			
			
			for (int i =1; i<sheet.getPhysicalNumberOfRows();i++) {
				Row currentRow = sheet.getRow(i);
				HashMap<String, String> currentHash = new HashMap<String, String>();
			
				
				for(int j=0;j<currentRow.getPhysicalNumberOfCells(); j++) {
					
					
					
					Cell currentCell = currentRow.getCell(j);
					
					switch(currentCell.getCellType()) {
					case Cell.CELL_TYPE_STRING :	currentHash.put(HeaderRow.getCell(j).getStringCellValue(), currentRow.getCell(j).getStringCellValue());
													break;
					
					case Cell.CELL_TYPE_NUMERIC :	currentHash.put(HeaderRow.getCell(j).getStringCellValue(), String.valueOf(currentRow.getCell(j).getNumericCellValue()));
						
					}
					
				}
				
				myData.add(currentHash);
				
			}
			
			
		} catch (Exception e) {
			
			e.printStackTrace();
		}
		
		
		return myData;
		
		
	}
	
	
	public static List<String> getDropDownOptions(WebElement element){
		
		Select select = new Select(element);
		List<WebElement> options = select.getOptions();
		List<String> strOptions = new ArrayList<String>();
		for(WebElement option:options) {
			
			strOptions.add(option.getText());
			
		}
		
		return strOptions;
		
	}
	
	public static void selectOptioninDropDown(WebElement ele, String opt) {
		
		List<WebElement> options =ele.findElements(By.tagName("option"));
		for(WebElement option:options) {
			if(option.getText().equals(opt)) {
				option.click();
				break;
			}
		}
	}

}
	
	
	
	
